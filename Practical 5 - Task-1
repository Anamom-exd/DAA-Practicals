#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

void findAndPrintLCS(char *text1, char *text2) {
    int m = strlen(text1);
    int n = strlen(text2);

    int **dp = (int **)malloc((m + 1) * sizeof(int *));
    for (int i = 0; i <= m; i++) {
        dp[i] = (int *)calloc(n + 1, sizeof(int));
    }

    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (text1[i - 1] == text2[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    int lcsLength = dp[m][n];
    char *lcsString = (char *)malloc((lcsLength + 1) * sizeof(char));
    lcsString[lcsLength] = '\0';

    int i = m, j = n;
    int index = lcsLength;

    while (i > 0 && j > 0) {
        if (text1[i - 1] == text2[j - 1]) {
            lcsString[index - 1] = text1[i - 1];
            i--;
            j--;
            index--;
        } else if (dp[i - 1][j] > dp[i][j - 1]) {
            i--;
        } else {
            j--;
        }
    }

    printf("Longest Common Subsequence: %s\n", lcsString);
    printf("Length of Longest Common Subsequence: %d\n", lcsLength);

    free(lcsString);
    for (int k = 0; k <= m; k++) {
        free(dp[k]);
    }
    free(dp);
}

int main(void) {
    char text1[] = "GACAGCCTACAAGCGTTAGCTTG";
    char text2[] = "AGCCCTAAGGGCTACCTAGCTT";

    findAndPrintLCS(text1, text2);

    return 0;
}
