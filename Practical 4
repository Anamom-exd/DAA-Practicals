#include <stdio.h>

typedef struct {
    int sum;
    int start_index;
    int end_index;
} SubarrayResult;

SubarrayResult findMaxSumSubarray(const int *resources, int size, int constraint) {
    SubarrayResult result;
    result.sum = -1;
    result.start_index = -1;
    result.end_index = -1;

    if (constraint >= 0) {
        result.sum = 0;
    }

    if (size == 0 || resources == NULL) {
        return result;
    }

    int current_sum = 0;
    int start = 0;

    for (int end = 0; end < size; end++) {
        current_sum += resources[end];
        while (current_sum > constraint && start <= end) {
            current_sum -= resources[start];
            start++;
        }
        if (current_sum > result.sum) {
            result.sum = current_sum;
            result.start_index = start;
            result.end_index = end;
        }
    }

    return result;
}

void printResult(SubarrayResult res, const int *resources, const char *test_name) {
    printf("--- %s ---\n", test_name);
    if (res.start_index == -1) {
        printf("Result: No feasible subarray found.\n\n");
    } else {
        printf("Result: Best subarray sum = %d\n", res.sum);
        printf("Subarray: [ ");
        for (int i = res.start_index; i <= res.end_index; i++) {
            printf("%d ", resources[i]);
        }
        printf("]\n\n");
    }
}

int main() {
    int res1[] = {2, 1, 3, 4};
    int con1 = 5;
    SubarrayResult r1 = findMaxSumSubarray(res1, 4, con1);
    printResult(r1, res1, "Test 1: Basic Small Array");

    int res2[] = {4, 2, 3, 1};
    int con2 = 5;
    SubarrayResult r2 = findMaxSumSubarray(res2, 4, con2);
    printResult(r2, res2, "Test 2: Sliding Window Shrink Needed");

    int res3[] = {6, 7, 8};
    int con3 = 5;
    SubarrayResult r3 = findMaxSumSubarray(res3, 3, con3);
    printResult(r3, res3, "Test 3: No Feasible Subarray (All > Constraint)");

    int *res4 = NULL;  // Empty array case
    int con4 = 10;
    SubarrayResult r4 = findMaxSumSubarray(res4, 0, con4);
    printResult(r4, res4, "Test 4: Empty Array");

    int res5[] = {1, 2, 3};
    int con5 = 0;
    SubarrayResult r5 = findMaxSumSubarray(res5, 3, con5);
    printResult(r5, res5, "Test 5: Constraint = 0 (Expected 'Not Found')");

    int res6[] = {1, 0, 5, 0, 2};
    int con6 = 7;
    int size6 = sizeof(res6) / sizeof(res6[0]);
    SubarrayResult r6 = findMaxSumSubarray(res6, size6, con6);
    printResult(r6, res6, "Test 6: Array with Zeroes and Max Length");

    return 0;
}
